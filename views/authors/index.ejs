<h4 class="text-white"><strong>Authors</strong></h4>
<hr class="text-white">
<h6 class="text-white"><strong>Search Authors</strong></h6>
<div class="text-center">
  <form class="d-block justify-content-center align-items-center" action="/authors" method="GET">
    <!-- Search Name -->
    <div class="form-floating mb-3 text-dark">
      <input type="text" class="form-control w-100" id="floatingInput" name="name" value="<%= searchOptions.name %>" placeholder="">
      <label for="floatingInput"><strong>Name</strong></label>
    </div>
    <!-- Search Button -->
    <div class="d-block justify-content-center">
      <button type="submit" class="btn btn-outline-success w-25">Search</button>
      <a type="button" class="btn btn-outline-danger w-25" href="/authors">Cancel</a>
    </div>
  </form>
  <br>
  <!-- Display Results -->
  <div class="d-flex justify-content-center align-items-center">
    <table class="table table-hover table-dark table-striped table-bordered border-primary w-75">
      <thead>
        <tr>
          <th scope="col">Name</th>
          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody class="table-group-divider">
        <% authors.slice(0, Math.max(5, authors.length)).forEach(author => { %>
        <tr>
          <td scope="row"><%= author.name %></td>
          <td scope="row" class="w-25">
            <div class="d-flex justify-content-center">
              <a type="button" href="/authors/<%= author.id %>" class="btn btn-outline-primary mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="View">
                <i class='bx bxs-user-badge text-white'></i>
              </a>
              <a type="button" href="/authors/<%= author.id %>/edit" class="btn btn-outline-warning mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Edit">
                <i class='bx bx-edit text-white'></i>
              </a>
              <form method="POST" action="/authors/<%= author.id %>?_method=DELETE">
                <button type="submit" class="btn btn-outline-danger mx-1 delete-author-btn" data-author-id="<%= author.id %>" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Delete">
                  <i class='bx bxs-trash text-white'></i>
                </button>
              </form>
            </div>
          </td>
        </tr>
        <% }) %>
      </tbody>
    </table>

  </div>
</div>

<!-- Tooltip -->
<script>
  const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
  const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</script>

<script>
  const deleteButtons = document.querySelectorAll('.delete-author-btn');

  deleteButtons.forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const authorId = button.getAttribute('data-author-id');

      const confirmation = await Swal.fire({
        title: 'Are you sure you want to delete this author?',
        text: "This action cannot be undone.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
      });

      if (confirmation.isConfirmed) {
        try {
          const response = await axios.delete(`/authors/${authorId}`);
          if (response.status === 200) {
            Swal.fire({
              toast: true,
              icon: 'success',
              iconColor: '#fff',
              color: '#fff',
              title: 'Success',
              position: 'top-right',
              background: '#00ff00',
              showConfirmButton: false,
              timer: 1000,
              timerProgressBar: true,
              text: "Author deleted successfully!"
            });
            location.reload();
          } else {
            const errorMessage = response.data.Error;
            Swal.fire({
              toast: true,
              icon: 'error',
              iconColor: '#fff',
              color: '#fff',
              title: 'Error',
              position: 'top-right',
              background: '#cc0000',
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
              text: errorMessage
            });
          }
        } catch (error) {
          console.log(error);
          Swal.fire({
            toast: true,
            icon: 'error',
            iconColor: '#fff',
            color: '#fff',
            title: 'Error',
            position: 'top-right',
            background: '#cc0000',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            text: 'Error deleting author'
          });
        }
      }
    });
  });
</script>