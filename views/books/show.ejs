<h2 class="text-white"><strong>View Book</strong></h2>
<hr class="text-white">

<div class="row">

  <div class="col">
    <img style="margin-left: 80px;" width="100" height="165" src="<%= book.coverImagePath %>">
  </div>

  <div class="col-sm-8 text-white">
    <div>
      <strong>Title: </strong><%= book.title %>
    </div>

    <div>
      <strong>Author: </strong> <%= book.author.name %>
    </div>

    <div>
      <strong>Publish Date: </strong> <%= book.publishDate.toDateString() %>
    </div>

    <div>
      <strong>Description: </strong> <%= book.description %>
    </div>

    <hr class="text-white w-50">

    <div class="d-flex justify-content-center" style="margin-right: 200px;">
      <a type="button" href="/authors/<%= book.author.id %>" class="btn btn-outline-primary mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="View Author">
        <i class='bx bxs-user-badge text-white'></i>
      </a>

      <a type="button" href="/books/<%= book.id %>/edit" class="btn btn-outline-warning mx-1" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Edit">
        <i class='bx bx-edit text-white'></i>
      </a>

      <form method="POST" action="/books/<%= book.id %>?_method=DELETE">
        <button type="submit" class="btn btn-outline-danger mx-1 delete-book-btn" data-book-id="<%= book.id %>" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Delete">
          <i class='bx bxs-trash text-white'></i>
        </button>
      </form>

    </div>
  </div>
</div>


<!-- Tooltip -->
<script>
  const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]')
  const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))
</script>

<script>
  const deleteButtons = document.querySelectorAll('.delete-book-btn');

  deleteButtons.forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const bookId = button.getAttribute('data-book-id');

      const confirmation = await Swal.fire({
        title: 'Are you sure you want to delete this book?',
        text: "This action cannot be undone.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!',
        cancelButtonText: 'Cancel',
      });

      if (confirmation.isConfirmed) {
        try {
          const response = await axios.delete(`/books/${bookId}`);
          if (response.status === 200) {
            Swal.fire({
              toast: true,
              icon: 'success',
              iconColor: '#fff',
              color: '#fff',
              title: 'Success',
              position: 'top-right',
              background: '#00ff00',
              showConfirmButton: false,
              timer: 1000,
              timerProgressBar: true,
              text: "Book deleted successfully!"
            });
            window.location.href = '/books';
          } else {
            const errorMessage = response.data.Error;
            Swal.fire({
              toast: true,
              icon: 'error',
              iconColor: '#fff',
              color: '#fff',
              title: 'Error',
              position: 'top-right',
              background: '#cc0000',
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
              text: errorMessage
            });
          }
        } catch (error) {
          console.log(error);
          Swal.fire({
            toast: true,
            icon: 'error',
            iconColor: '#fff',
            color: '#fff',
            title: 'Error',
            position: 'top-right',
            background: '#cc0000',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            text: 'Error deleting book'
          });
        }
      }
    });
  });
</script>